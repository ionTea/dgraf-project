<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Boids project</title>
    <link>http://iontea.github.io/dgraf-project/</link>
    <description>Recent content on Boids project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jun 2016 13:42:18 +0200</lastBuildDate>
    <atom:link href="http://iontea.github.io/dgraf-project/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Working boids</title>
      <link>http://iontea.github.io/dgraf-project/post/behaviour/</link>
      <pubDate>Thu, 09 Jun 2016 13:42:18 +0200</pubDate>
      
      <guid>http://iontea.github.io/dgraf-project/post/behaviour/</guid>
      <description>

&lt;p&gt;We have implemented the behavior of the boids. They follow a simple set of rules, inspired from
&lt;a href=&#34;http://www.red3d.com/cwr/boids/&#34;&gt;&lt;em&gt;Craig Reynolds&lt;/em&gt;&lt;/a&gt; work in the 80&amp;rsquo;s. The basic rules the boids follow are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Separation&lt;/strong&gt;: steer to avoid crowding local&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alignment&lt;/strong&gt;: steer towards the average heading of local flockmates&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cohesion&lt;/strong&gt;: steer to move toward the average position of local flockmates&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Target&lt;/strong&gt;: steer towords a general target location&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;pseudocode-outlining-the-behavior:9824f5c8418f954f8edb936482538bdb&#34;&gt;Pseudocode outlining the behavior&lt;/h4&gt;

&lt;p&gt;Here is pseudocode outlining the behavior mechanism,
provided by &lt;a href=&#34;http://www.kfish.org/boids/pseudocode.html&#34;&gt;&lt;em&gt;Conrad Parker&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Separation(boid bJ)

    Vector c = 0;

    FOR EACH BOID b
        IF b != bJ THEN
            IF |b.position - bJ.position| &amp;lt; 100 THEN
                c = c - (b.position - bJ.position)
            END IF
        END IF
    END

    RETURN c * SEPERATION_BIAS
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Alignment(boid bJ)

    Vector pvJ

    FOR EACH BOID b
        IF b != bJ THEN
            pvJ = pvJ + b.velocity
        END IF
    END

    pvJ = pvJ / N-1

    RETURN (pvJ - bJ.velocity) * ALIGNMENT_BIAS

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; Cohesion(boid bJ)

    Vector pcJ

    FOR EACH BOID b
        IF b != bJ THEN
            pcJ = pcJ + b.position
        END IF
    END

    pcJ = pcJ / N-1

    RETURN (pcJ - bJ.position) * COHESION_BIAS
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Target(Boid b)
    Vector place

    RETURN (place - b.position) * TARGET_BIAS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The different bias values we use can be altered to change the way
the boids group and move together.&lt;/p&gt;

&lt;h3 id=&#34;last-but-lot-least:9824f5c8418f954f8edb936482538bdb&#34;&gt;Last but lot least&lt;/h3&gt;

&lt;p&gt;A video demonstration
As target we have the big boid, so all other boids will want to move
towards this boid. Later in the video you can see the underlying Quadtree
we use, and how it adapts to the boids positions and how the proximity
algorithm limits the number of potential neighboring boids.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/jSBxFq6pMIE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>floats</title>
      <link>http://iontea.github.io/dgraf-project/post/floats/</link>
      <pubDate>Thu, 02 Jun 2016 14:10:48 +0200</pubDate>
      
      <guid>http://iontea.github.io/dgraf-project/post/floats/</guid>
      <description>

&lt;h3 id=&#34;floats-floats-why-art-though-keff-bad-chaos:741637134d4ba667620ddef67a4d65e7&#34;&gt;Floats, floats, why art though keff ( bad / chaos )&lt;/h3&gt;

&lt;p&gt;Since starting to implement our boids behavior the program has
showing weird behavior. Sometimes the quadtree insert goes into an infinite
loop. Sometimes we get read-access violation. Sometimes we get wired null
references. At first we thought our cleanup of the tree might be wrong.
Maybe we deleted nodes that were in use? That would explain the read-access
violation at least, but not all our problems. After some serious debugging
we noticed something.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; size = 9.697e-42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we implemented the behavior, we didn&amp;rsquo;t finish with the separation behavior,
to prevent the boids from being on the same spot. They do however have cohesion,
so the will move towards each other. So they all ocupied the same space. Mother fu***.&lt;/p&gt;

&lt;p&gt;This might cause our floating precision to be off, since floats are &lt;strong&gt;really&lt;/strong&gt; bad
at comparisons. So when the areas are that small we are unable to decide where to
place a boid in the tree, leading to unpredictable behavior.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eureka!</title>
      <link>http://iontea.github.io/dgraf-project/post/working-quadtree/</link>
      <pubDate>Wed, 01 Jun 2016 10:37:18 +0200</pubDate>
      
      <guid>http://iontea.github.io/dgraf-project/post/working-quadtree/</guid>
      <description>

&lt;h3 id=&#34;today-is-a-good-day:360d8edd5274fe9e75b48456bb9db3de&#34;&gt;Today is a good day&lt;/h3&gt;

&lt;p&gt;Our quadtree is fully operational. The tree updates the nodes on the fly, and adapts to the movement of the boids.
A demonstration can be seen by pressing the beak bellow.&lt;/p&gt;

&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Y1zuuNbmelA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;br&gt;
The following picture shows which boids are found by our quadtree search. The search finds all boids which resides inside a quad that intersects the circle. After finding these &lt;strong&gt;potential&lt;/strong&gt; close boids, we can check if they are actually inside the desired search range.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/quadtree-search-1.PNG&#34; alt=&#34;Quadtree search&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A more clear visualisation of what the search considers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/geohash-query.png&#34; alt=&#34;Clear visualisation&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;current-todo-list:360d8edd5274fe9e75b48456bb9db3de&#34;&gt;Current TODO list&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implementing the behaviour of our Boids.&lt;/li&gt;
&lt;li&gt;Implement a &amp;ldquo;find n closest neighbors&amp;rdquo; search.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Quadtree proximity</title>
      <link>http://iontea.github.io/dgraf-project/post/Quadtree-proximity/</link>
      <pubDate>Tue, 31 May 2016 17:07:13 +0200</pubDate>
      
      <guid>http://iontea.github.io/dgraf-project/post/Quadtree-proximity/</guid>
      <description>

&lt;p&gt;Hello again!&lt;/p&gt;

&lt;p&gt;Last time we had a working(ish) Quadtree, and now we have implemented
a way to search a given distance from a Boid and find all neighboring
Boids. This is done by searching the Quadtree from the position of the
Boid, until you find all other Quadtree nodes that are within the distance.
From these nodes we have an area to look for other Boids.&lt;/p&gt;

&lt;h3 id=&#34;this-is-how-it-looked-at-first:626908ea8a8c83d842cf6ecd5d94294b&#34;&gt;This is how it looked at first&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/square-bad.png&#34; alt=&#34;Nodes intersecting distance, wrong&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you surly can deduce, this isn&amp;rsquo;t quite right. We were a bit of in our
reasoning when deciding which nodes are in proximity. We had decided to only
look at the edges of the nodes, since it would be fast to calculate. As you can
see the area found was a lot larger then necessary, if we look at a circular
area instead we can avoid looking at large areas, as illustrated bellow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/geohash-query.png&#34; alt=&#34;Circular proximity tree-nodes&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;some-adjustments-later:626908ea8a8c83d842cf6ecd5d94294b&#34;&gt;Some adjustments later&lt;/h3&gt;

&lt;p&gt;After this adjustment, and some headache trying to figure out how to calculate
the circle intersection with nodes, we had this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/circle-fine.png&#34; alt=&#34;Nodes intersecting distance&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Just as a test we added a bonkers amount of Boids, but only rendered the ones
within the radius, and we were able to have like 250000 Boids at the same
time without too much lag. It shows how effective a Quadtree can be for performance
amplification.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quad tree working (ish)</title>
      <link>http://iontea.github.io/dgraf-project/post/quad-tree-working-ish/</link>
      <pubDate>Mon, 30 May 2016 13:15:34 +0200</pubDate>
      
      <guid>http://iontea.github.io/dgraf-project/post/quad-tree-working-ish/</guid>
      <description>&lt;p&gt;We got the quadtree to work but without any restructuring. ie we do not remove empty nodes. Performance is not the priority right now so we ignore that for now. We solved the issue by rewriting the insert and update-node functions from scratch and made them much more clean. The search for beak neighbors are the next thing to do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/quadtree-working-5.PNG&#34; alt=&#34;Drawing debug, showing node/entity relation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/quadtree-working-3.PNG&#34; alt=&#34;1936 boids&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/quadtree-working-4.PNG&#34; alt=&#34;Closeup&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quadtree - for great success</title>
      <link>http://iontea.github.io/dgraf-project/post/quad-tree/</link>
      <pubDate>Fri, 27 May 2016 13:08:56 +0200</pubDate>
      
      <guid>http://iontea.github.io/dgraf-project/post/quad-tree/</guid>
      <description>

&lt;p&gt;We wanted our Boids (currently meaning &lt;em&gt;Beak-oid like objects&lt;/em&gt;) to have high
performance when looking for other Boids in proximity, both for collision
detection and for our grouping algorithm. So we started implementing a Quadtree
structure to partition our 2D space into areas, and storing the entities in the
Quadtree. Below is an image on the current crude Quadtree (it&amp;rsquo;s not 100% bug free. yet.).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/quadtree-initial.PNG&#34; alt=&#34;Quadtree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the area is partitioned into smaller areas where each contain a entity. The upside
of using this partitioning is that the entities that are close to each other in the tree-structure
will be close to each other in real-space as well. This means that the searching for neighbors will be fast.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/quadtree-2.png&#34; alt=&#34;Quadtree again&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;current-objective:de39d265557135bc5a2a773a5a477932&#34;&gt;Current Objective&lt;/h3&gt;

&lt;p&gt;We are currenlty working on getting the Quadtree working as intended. It is having some trouble with null-pointers,
and &lt;em&gt;&amp;ldquo;loosing&amp;rdquo;&lt;/em&gt; entities. But it&amp;rsquo;s just another days work in computer science.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WE EAT BUGS FOR BREAKFAST&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Yolo.
Peace out.&lt;/p&gt;

&lt;p&gt;Jonathan and Mathias&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Snoids?</title>
      <link>http://iontea.github.io/dgraf-project/post/snoids/</link>
      <pubDate>Wed, 25 May 2016 14:45:13 +0200</pubDate>
      
      <guid>http://iontea.github.io/dgraf-project/post/snoids/</guid>
      <description>&lt;p&gt;The first demo of some simple boids. This version only uses random behavior for all the boids. A bigger meaner boid was added for aesthetics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://iontea.github.io/dgraf-project/img/v1.png&#34; alt=&#34;snoid&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Specification</title>
      <link>http://iontea.github.io/dgraf-project/post/first-post/</link>
      <pubDate>Tue, 24 May 2016 14:21:19 +0200</pubDate>
      
      <guid>http://iontea.github.io/dgraf-project/post/first-post/</guid>
      <description>

&lt;h1 id=&#34;project-specification:f3b70d76da56e15d82042b9ef176d71f&#34;&gt;Project Specification&lt;/h1&gt;

&lt;h2 id=&#34;background:f3b70d76da56e15d82042b9ef176d71f&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Simulation of group behaviour can take many forms, and can be done in both sophisticated as well as simple ways. Allowing the different agents to interact with each other as well as other objects in an environment can give rise to interesting behaviour. There is however lots of things to take into account when building this kind of grouping behaviour, for example grouping of actors, collision detection as well as collision avoidance (actively moving out of the way of something).&lt;/p&gt;

&lt;h2 id=&#34;problem:f3b70d76da56e15d82042b9ef176d71f&#34;&gt;Problem&lt;/h2&gt;

&lt;p&gt;We are interested in implementing a boid system, where we simulate the behaviour of predator and prey, where the prays exhibit a grouping behavior of staying together while avoiding the predator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FQ4YJbD0zRM&#34;&gt;Example of fishes + shark&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rN8DzlgMt3M&#34;&gt;Example of birds + evil birds&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;implementation:f3b70d76da56e15d82042b9ef176d71f&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;We are not very interested in the aesthetics, we just want to model the behaviour. So if we render fishes or if we render dots, it doesn’t make a difference. So we are unsure if we should use Unity at all, since it might just be unnecessary overhead, and we can’t leverage any of the knowledge from the labs. We are currenly thinking of using SFML (&lt;a href=&#34;http://www.sfml-dev.org/&#34;&gt;http://www.sfml-dev.org/&lt;/a&gt;) just to render stuff, and implement the actor behaviour in C++.&lt;/p&gt;

&lt;h2 id=&#34;evaluation:f3b70d76da56e15d82042b9ef176d71f&#34;&gt;Evaluation&lt;/h2&gt;

&lt;p&gt;Does it look bonkes siq nice? Then we are happy.&lt;/p&gt;

&lt;h2 id=&#34;contingency-plan:f3b70d76da56e15d82042b9ef176d71f&#34;&gt;Contingency Plan&lt;/h2&gt;

&lt;p&gt;We will try to implement the behaviour ourselves but using a library such as RVO is not out of the question.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>